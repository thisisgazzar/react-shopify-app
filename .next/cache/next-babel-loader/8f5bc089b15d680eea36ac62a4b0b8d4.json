{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Banner, Card, DisplayText, Form, FormLayout, Frame, Layout, Page, PageActions, TextField, Toast } from '@shopify/polaris';\nimport store from 'store-js';\nimport gql from 'graphql-tag';\nimport { Mutation } from 'react-apollo';\nconst UPDATE_PRICE = gql`\n  mutation productVariantUpdate($input: ProductVariantInput!) {\n    productVariantUpdate(input: $input) {\n      product {\n        title\n      }\n      productVariant {\n        id\n        price\n      }\n    }\n  }\n`;\n\nclass EditProduct extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      id: this.props.id,\n      price: this.props.product.variants.edges[0].node.price,\n      discount: '',\n      variantId: this.props.product.variants.edges[0].node.id,\n      showToast: false\n    });\n\n    _defineProperty(this, \"handleChange\", field => {\n      return value => this.setState({\n        [field]: value\n      });\n    });\n\n    _defineProperty(this, \"itemToBeConsumed\", () => {\n      const item = store.get('item');\n      const price = item.variants.edges[0].node.price;\n      const variantId = item.variants.edges[0].node.id;\n      const discounter = price * 0.1;\n      this.setState({\n        price,\n        variantId\n      });\n      return (price - discounter).toFixed(2);\n    });\n  }\n\n  componentDidMount() {\n    this.setState({\n      discount: this.itemToBeConsumed()\n    });\n  }\n\n  render() {\n    const {\n      name,\n      price,\n      discount,\n      variantId\n    } = this.state;\n    return __jsx(Mutation, {\n      mutation: UPDATE_PRICE\n    }, (handleSubmit, {\n      error,\n      data\n    }) => {\n      const showError = error && __jsx(Banner, {\n        status: \"critical\"\n      }, error.message);\n\n      const showToast = data && data.productVariantUpdate && __jsx(Toast, {\n        content: \"Sucessfully updated\",\n        onDismiss: () => this.setState({\n          showToast: false\n        })\n      });\n\n      return __jsx(Frame, null, __jsx(Page, null, __jsx(Layout, null, showToast, __jsx(Layout.Section, null, showError), __jsx(Layout.Section, null, __jsx(DisplayText, {\n        size: \"large\"\n      }, name), __jsx(Form, null, __jsx(Card, {\n        sectioned: true\n      }, __jsx(FormLayout, null, __jsx(FormLayout.Group, null, __jsx(TextField, {\n        prefix: \"$\",\n        value: price,\n        disabled: true,\n        label: \"Original price\",\n        type: \"price\"\n      }), __jsx(TextField, {\n        prefix: \"$\",\n        value: discount,\n        onChange: this.handleChange('discount'),\n        label: \"Discounted price\",\n        type: \"discount\"\n      })), __jsx(\"p\", null, \"This sale price will expire in two weeks\"))), __jsx(PageActions, {\n        primaryAction: [{\n          content: 'Save',\n          onAction: () => {\n            const productVariableInput = {\n              id: variantId,\n              price: discount\n            };\n            handleSubmit({\n              variables: {\n                input: productVariableInput\n              }\n            });\n          }\n        }],\n        secondaryActions: [{\n          content: 'Remove discount'\n        }]\n      }))))));\n    });\n  }\n\n}\n\nexport default EditProduct;","map":{"version":3,"sources":["D:/react projects/github/react-shopify-next/pages/edit-products.js"],"names":["Banner","Card","DisplayText","Form","FormLayout","Frame","Layout","Page","PageActions","TextField","Toast","store","gql","Mutation","UPDATE_PRICE","EditProduct","React","Component","id","props","price","product","variants","edges","node","discount","variantId","showToast","field","value","setState","item","get","discounter","toFixed","componentDidMount","itemToBeConsumed","render","name","state","handleSubmit","error","data","showError","message","productVariantUpdate","handleChange","content","onAction","productVariableInput","variables","input"],"mappings":";;;;;AAAA,SACIA,MADJ,EAEIC,IAFJ,EAGIC,WAHJ,EAIIC,IAJJ,EAKIC,UALJ,EAMIC,KANJ,EAOIC,MAPJ,EAQIC,IARJ,EASIC,WATJ,EAUIC,SAVJ,EAWIC,KAXJ,QAYO,kBAZP;AAaA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,QAAT,QAAyB,cAAzB;AAEA,MAAMC,YAAY,GAAGF,GAAI;;;;;;;;;;;;CAAzB;;AAaA,MAAMG,WAAN,SAA0BC,KAAK,CAACC,SAAhC,CAA0C;AAAA;AAAA;;AAAA,mCAC9B;AACJC,MAAAA,EAAE,EAAE,KAAKC,KAAL,CAAWD,EADX;AAEJE,MAAAA,KAAK,EAAE,KAAKD,KAAL,CAAWE,OAAX,CAAmBC,QAAnB,CAA4BC,KAA5B,CAAkC,CAAlC,EAAqCC,IAArC,CAA0CJ,KAF7C;AAGJK,MAAAA,QAAQ,EAAE,EAHN;AAIJC,MAAAA,SAAS,EAAE,KAAKP,KAAL,CAAWE,OAAX,CAAmBC,QAAnB,CAA4BC,KAA5B,CAAkC,CAAlC,EAAqCC,IAArC,CAA0CN,EAJjD;AAKJS,MAAAA,SAAS,EAAE;AALP,KAD8B;;AAAA,0CA+FtBC,KAAD,IAAW;AACtB,aAAQC,KAAD,IAAW,KAAKC,QAAL,CAAc;AAAE,SAACF,KAAD,GAASC;AAAX,OAAd,CAAlB;AACH,KAjGqC;;AAAA,8CAmGnB,MAAM;AACrB,YAAME,IAAI,GAAGpB,KAAK,CAACqB,GAAN,CAAU,MAAV,CAAb;AACA,YAAMZ,KAAK,GAAGW,IAAI,CAACT,QAAL,CAAcC,KAAd,CAAoB,CAApB,EAAuBC,IAAvB,CAA4BJ,KAA1C;AACA,YAAMM,SAAS,GAAGK,IAAI,CAACT,QAAL,CAAcC,KAAd,CAAoB,CAApB,EAAuBC,IAAvB,CAA4BN,EAA9C;AACA,YAAMe,UAAU,GAAGb,KAAK,GAAG,GAA3B;AACA,WAAKU,QAAL,CAAc;AAAEV,QAAAA,KAAF;AAASM,QAAAA;AAAT,OAAd;AACA,aAAO,CAACN,KAAK,GAAGa,UAAT,EAAqBC,OAArB,CAA6B,CAA7B,CAAP;AACH,KA1GqC;AAAA;;AAStCC,EAAAA,iBAAiB,GAAG;AAChB,SAAKL,QAAL,CAAc;AAAEL,MAAAA,QAAQ,EAAE,KAAKW,gBAAL;AAAZ,KAAd;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEC,MAAAA,IAAF;AAAQlB,MAAAA,KAAR;AAAeK,MAAAA,QAAf;AAAyBC,MAAAA;AAAzB,QAAuC,KAAKa,KAAlD;AACA,WACI,MAAC,QAAD;AACI,MAAA,QAAQ,EAAEzB;AADd,OAGK,CAAC0B,YAAD,EAAe;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAf,KAAmC;AAChC,YAAMC,SAAS,GAAGF,KAAK,IACnB,MAAC,MAAD;AAAQ,QAAA,MAAM,EAAC;AAAf,SAA2BA,KAAK,CAACG,OAAjC,CADJ;;AAGA,YAAMjB,SAAS,GAAGe,IAAI,IAAIA,IAAI,CAACG,oBAAb,IACd,MAAC,KAAD;AACI,QAAA,OAAO,EAAC,qBADZ;AAEI,QAAA,SAAS,EAAE,MAAM,KAAKf,QAAL,CAAc;AAAEH,UAAAA,SAAS,EAAE;AAAb,SAAd;AAFrB,QADJ;;AAMA,aACI,MAAC,KAAD,QACI,MAAC,IAAD,QACI,MAAC,MAAD,QACKA,SADL,EAEI,MAAC,MAAD,CAAQ,OAAR,QACKgB,SADL,CAFJ,EAKI,MAAC,MAAD,CAAQ,OAAR,QACI,MAAC,WAAD;AAAa,QAAA,IAAI,EAAC;AAAlB,SAA2BL,IAA3B,CADJ,EAEI,MAAC,IAAD,QACI,MAAC,IAAD;AAAM,QAAA,SAAS;AAAf,SACI,MAAC,UAAD,QACI,MAAC,UAAD,CAAY,KAAZ,QACI,MAAC,SAAD;AACI,QAAA,MAAM,EAAC,GADX;AAEI,QAAA,KAAK,EAAElB,KAFX;AAGI,QAAA,QAAQ,EAAE,IAHd;AAII,QAAA,KAAK,EAAC,gBAJV;AAKI,QAAA,IAAI,EAAC;AALT,QADJ,EAQI,MAAC,SAAD;AACI,QAAA,MAAM,EAAC,GADX;AAEI,QAAA,KAAK,EAAEK,QAFX;AAGI,QAAA,QAAQ,EAAE,KAAKqB,YAAL,CAAkB,UAAlB,CAHd;AAII,QAAA,KAAK,EAAC,kBAJV;AAKI,QAAA,IAAI,EAAC;AALT,QARJ,CADJ,EAiBI,4DAjBJ,CADJ,CADJ,EAwBI,MAAC,WAAD;AACI,QAAA,aAAa,EAAE,CACX;AACIC,UAAAA,OAAO,EAAE,MADb;AAEIC,UAAAA,QAAQ,EAAE,MAAM;AACZ,kBAAMC,oBAAoB,GAAG;AACzB/B,cAAAA,EAAE,EAAEQ,SADqB;AAEzBN,cAAAA,KAAK,EAAEK;AAFkB,aAA7B;AAIAe,YAAAA,YAAY,CAAC;AACTU,cAAAA,SAAS,EAAE;AAAEC,gBAAAA,KAAK,EAAEF;AAAT;AADF,aAAD,CAAZ;AAGH;AAVL,SADW,CADnB;AAeI,QAAA,gBAAgB,EAAE,CACd;AACIF,UAAAA,OAAO,EAAE;AADb,SADc;AAftB,QAxBJ,CAFJ,CALJ,CADJ,CADJ,CADJ;AA6DH,KA1EL,CADJ;AA8EH;;AA7FqC;;AA6G1C,eAAehC,WAAf","sourcesContent":["import {\r\n    Banner,\r\n    Card,\r\n    DisplayText,\r\n    Form,\r\n    FormLayout,\r\n    Frame,\r\n    Layout,\r\n    Page,\r\n    PageActions,\r\n    TextField,\r\n    Toast,\r\n} from '@shopify/polaris';\r\nimport store from 'store-js';\r\nimport gql from 'graphql-tag';\r\nimport { Mutation } from 'react-apollo';\r\n\r\nconst UPDATE_PRICE = gql`\r\n  mutation productVariantUpdate($input: ProductVariantInput!) {\r\n    productVariantUpdate(input: $input) {\r\n      product {\r\n        title\r\n      }\r\n      productVariant {\r\n        id\r\n        price\r\n      }\r\n    }\r\n  }\r\n`;\r\nclass EditProduct extends React.Component {\r\n    state = {\r\n        id: this.props.id,\r\n        price: this.props.product.variants.edges[0].node.price,\r\n        discount: '',\r\n        variantId: this.props.product.variants.edges[0].node.id,\r\n        showToast: false,\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.setState({ discount: this.itemToBeConsumed() });\r\n    }\r\n\r\n    render() {\r\n        const { name, price, discount, variantId } = this.state;\r\n        return (\r\n            <Mutation\r\n                mutation={UPDATE_PRICE}\r\n            >\r\n                {(handleSubmit, { error, data }) => {\r\n                    const showError = error && (\r\n                        <Banner status=\"critical\">{error.message}</Banner>\r\n                    );\r\n                    const showToast = data && data.productVariantUpdate && (\r\n                        <Toast\r\n                            content=\"Sucessfully updated\"\r\n                            onDismiss={() => this.setState({ showToast: false })}\r\n                        />\r\n                    );\r\n                    return (\r\n                        <Frame>\r\n                            <Page>\r\n                                <Layout>\r\n                                    {showToast}\r\n                                    <Layout.Section>\r\n                                        {showError}\r\n                                    </Layout.Section>\r\n                                    <Layout.Section>\r\n                                        <DisplayText size=\"large\">{name}</DisplayText>\r\n                                        <Form>\r\n                                            <Card sectioned>\r\n                                                <FormLayout>\r\n                                                    <FormLayout.Group>\r\n                                                        <TextField\r\n                                                            prefix=\"$\"\r\n                                                            value={price}\r\n                                                            disabled={true}\r\n                                                            label=\"Original price\"\r\n                                                            type=\"price\"\r\n                                                        />\r\n                                                        <TextField\r\n                                                            prefix=\"$\"\r\n                                                            value={discount}\r\n                                                            onChange={this.handleChange('discount')}\r\n                                                            label=\"Discounted price\"\r\n                                                            type=\"discount\"\r\n                                                        />\r\n                                                    </FormLayout.Group>\r\n                                                    <p>\r\n                                                        This sale price will expire in two weeks\r\n                                                    </p>\r\n                                                </FormLayout>\r\n                                            </Card>\r\n                                            <PageActions\r\n                                                primaryAction={[\r\n                                                    {\r\n                                                        content: 'Save',\r\n                                                        onAction: () => {\r\n                                                            const productVariableInput = {\r\n                                                                id: variantId,\r\n                                                                price: discount\r\n                                                            };\r\n                                                            handleSubmit({\r\n                                                                variables: { input: productVariableInput },\r\n                                                            });\r\n                                                        },\r\n                                                    },\r\n                                                ]}\r\n                                                secondaryActions={[\r\n                                                    {\r\n                                                        content: 'Remove discount'\r\n                                                    },\r\n                                                ]}\r\n                                            />\r\n                                        </Form>\r\n                                    </Layout.Section>\r\n                                </Layout>\r\n                            </Page>\r\n                        </Frame>\r\n                    );\r\n                }}\r\n            </Mutation>\r\n        );\r\n    }\r\n\r\n    handleChange = (field) => {\r\n        return (value) => this.setState({ [field]: value });\r\n    };\r\n\r\n    itemToBeConsumed = () => {\r\n        const item = store.get('item');\r\n        const price = item.variants.edges[0].node.price;\r\n        const variantId = item.variants.edges[0].node.id;\r\n        const discounter = price * 0.1;\r\n        this.setState({ price, variantId });\r\n        return (price - discounter).toFixed(2);\r\n    };\r\n}\r\n\r\nexport default EditProduct;"]},"metadata":{},"sourceType":"module"}